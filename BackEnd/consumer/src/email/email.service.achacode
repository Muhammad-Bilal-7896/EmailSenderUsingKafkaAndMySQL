import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Email } from './email.entity';

@Injectable()
export class EmailService {
  constructor(
    @InjectRepository(Email)
    private readonly emailRepository: Repository<Email>,
  ) {}

  async sendEmail(message: string, emailData: any) {
    const { id, to, subject, text, html, time_sent, email_number } = emailData;

    this.logReceivedEmail(email_number, message, time_sent, { to, subject, text, html });

    try {
      // Send the email using the MailerService or any other email service of your choice
      // await this.mailerService.sendMail({
      //   to,
      //   subject,
      //   text,
      //   html,
      // });

      await this.markEmailAsSent(id);

      this.logSentEmail(email_number, to);

      return `In Consumer! Email No. ${email_number} sent successfully to ${to}`;
    } catch (error) {
      this.handleError(error);
      throw error;
    }
  }

  private logReceivedEmail(emailNumber: number, message: string, timeSent: string, emailData: any) {
    console.log(`Consumer! Received email ${emailNumber}, message: ${message} request at ${timeSent}:`, emailData);
  }

  private async markEmailAsSent(id: number) {
    await this.emailRepository.update(id, { status: 'sent' });
  }

  private logSentEmail(emailNumber: number, to: string) {
    console.log(`In Consumer! Email No. ${emailNumber} sent successfully to ${to}`);
  }

  private handleError(error: any) {
    console.error('Error sending email:', error.message);
  }
}
